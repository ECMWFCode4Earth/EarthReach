import logging
from typing import List

import earthkit.plots as ekp
from PIL.ImageFile import ImageFile

from earth_reach_agent.config.criteria import QualityCriteria
from earth_reach_agent.core.evaluator import CriterionEvaluatorOutput, EvaluatorAgent
from earth_reach_agent.core.generator import GeneratorAgent
from earth_reach_agent.core.prompts.orchestrator import get_default_feedback_template

logger = logging.getLogger(__name__)


class Orchestrator:
    """Orchestrates Generator and Evaluator agents to create weather chart descriptions."""

    def __init__(
        self,
        generator_agent: GeneratorAgent,
        evaluator_agent: EvaluatorAgent,
        max_iterations: int = 3,
        criteria_threshold: int = 4,
        feedback_template: str | None = None,
    ) -> None:
        """
        Initialize the orchestrator with generator and evaluator agents.

        Args:
            generator_agent: Instance of GeneratorAgent for generating descriptions
            evaluator_agent: Instance of EvaluatorAgent for evaluating descriptions
            max_iterations: Maximum number of iterations for generating descriptions
        """
        self.generator_agent = generator_agent
        self.evaluator_agent = evaluator_agent
        self.max_iterations = max_iterations
        self.criteria_threshold = criteria_threshold
        self.feedback_template = feedback_template or get_default_feedback_template()
        self.criteria_limits_acknowledgment = {
            QualityCriteria.COHERENCE: "Warning: The logical flow and organization of this description may be unclear.",
            QualityCriteria.FLUENCY: "Warning: This description may contain linguistic issues, technical terminology errors, or unclear phrasing.",
            QualityCriteria.CONSISTENCY: "Warning: This description may contain inaccuracies relative to the source chart or internal contradictions.",
            QualityCriteria.RELEVANCE: "Warning: This description may not adequately emphasize the most meteorologically significant patterns.",
        }

    def run(
        self, figure: ekp.Figure | None = None, image: ImageFile | None = None
    ) -> str | None:
        """Run the iterative process of generating and evaluating a weather chart description
        until quality criteria are met.

        Args:
            figure (Figure | None): Optional figure to include in the request. Can't be used with image.
            image (ImageFile | None): Optional image to include in the request (will be converted to base64). Can't be used with figure.

        Returns:
            str | None: The final weather description if successful, None if max iterations reached without success
        """
        if figure is not None and image is not None:
            raise ValueError(
                "Only one of 'figure' or 'image' can be provided, not both."
            )

        try:
            for i in range(self.max_iterations):
                description = self.generator_agent.generate(figure=figure, image=image)
                if not description:
                    raise ValueError("Generated description is empty.")

                evaluation = self.evaluator_agent.evaluate(
                    description, image=image, figure=figure
                )

                if self.verify_evaluation_passes(evaluation):
                    return description

                self.provide_feedback_to_generator(i + 1, description, evaluation)

            logger.warning(
                f"Maximum iterations ({self.max_iterations}) reached without passing evaluation. Acknowledging limits of description."
            )

            description = self.acknowledge_limits_of_description(
                description, evaluation
            )

            return description
        except Exception as e:
            raise RuntimeError("Failed to generate a description") from e

    def verify_evaluation_passes(
        self, evaluation: List[CriterionEvaluatorOutput]
    ) -> bool:
        """
        Verify if the evaluation passes the quality criteria.

        Args:
            evaluation (List[CriterionEvaluatorOutput]): Evaluation results from the EvaluatorAgent

        Returns:
            bool: True if evaluation passes, False otherwise
        """
        return all(
            criterion.score >= self.criteria_threshold for criterion in evaluation
        )

    def provide_feedback_to_generator(
        self,
        evaluation_id: int,
        description: str,
        evaluation: List[CriterionEvaluatorOutput],
    ) -> None:
        """
        Provide feedback to the GeneratorAgent based on evaluation results.

        Args:
            description (str): The description generated by the GeneratorAgent
            evaluation (List[CriterionEvaluatorOutput]): Evaluation results from the EvaluatorAgent
        """
        unmet_criteria = [
            criterion
            for criterion in evaluation
            if criterion.score < self.criteria_threshold
        ]
        if not unmet_criteria:
            logger.warning("No unmet criteria found in evaluation.")
            return

        feedback = self.feedback_template.format(
            evaluation_id=evaluation_id,
            criteria_scores="\n- ".join(
                f"- {criterion.name}: {criterion.score}/5"
                for criterion in unmet_criteria
            ),
            criteria_reasoning="\n".join(
                f"- {criterion.name}: {criterion.reasoning or 'No reasoning available'}"
                for criterion in unmet_criteria
            ),
            description=description,
        )

        self.generator_agent.append_user_prompt(feedback)

    def acknowledge_limits_of_description(
        self, description: str, evaluation: List[CriterionEvaluatorOutput]
    ) -> str:
        """
        Add instructions to the GeneratorAgent for acknowledging the limits of the the description.

        Args:
            description (str): The description generated by the GeneratorAgent
            evaluation (List[CriterionEvaluatorOutput]): Evaluation results from the EvaluatorAgent
        """
        # TODO: implement static acknowledgment of limits based on which criteria didn't pass the threshold
        return description
