services:
  vllm-server:
    image: vllm-server
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vllm-server
    restart: unless-stopped
    command: vllm serve ${MODEL_DIR_PATH} --served-model-name ${MODEL_NAME} --port ${VLLM_PORT} --api-key ${VLLM_SERVER_API_KEY}
    #ports:
      #- 8000:${VLLM_PORT} # Enable for debugging
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ${HF_CACHE_DIR}:/app/.cache/huggingface
    environment:
      - HF_HOME=/app/.cache/huggingface
    ipc: host
      #    labels:
      #      - "traefik.enable=true"
      #      - "traefik.http.routers.vllm-server.rule=Host(`${DOMAIN}`)"
      #      - "traefik.http.routers.vllm-server.tls=true"
      #      - "traefik.http.routers.vllm-server.entrypoints=https"
      #      - "traefik.http.routers.vllm-server.tls.certresolver=cloudflare"
      #      - "traefik.http.routers.vllm-server.tls.domains[0].main=${DOMAIN}"
      #      - "traefik.http.routers.vllm-server.tls.domains[0].sans=*.${DOMAIN}"
      #      - "traefik.http.services.vllm-server.loadbalancer.server.port=${VLLM_PORT}"
      
  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: unless-stopped
    command:
      # ----- Basic config -----
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # ----- Set up HTTP(S) and redirects (to force HTTPS) -----
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--entrypoints.http.http.redirections.entryPoint.to=https"
      - "--entrypoints.http.http.redirections.entryPoint.scheme=https"
      # ----- Prevents insecure headers forwarding -----
      - "--entryPoints.http.forwardedHeaders.insecure=false"
      - "--entryPoints.http.proxyProtocol.insecure=false"
      - "--entryPoints.https.forwardedHeaders.insecure=false"
      - "--entryPoints.https.proxyProtocol.insecure=false"
      - "--entryPoints.http.proxyProtocol.trustedIPs=${CF_IPS}"
      - "--entryPoints.https.proxyProtocol.trustedIPs=${CF_IPS}"
      # ----- Set up TLS with LetsEncrypt -----
      - "--certificatesresolvers.cloudflare.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.email=${CF_ACME_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.storage=/var/cert/acme.json"
      # ----- Logging & Debugging & API -----
      - "--log=true"
      - "--log.level=DEBUG" # Can be ERROR (default), DEBUG, PANIC, FATAL, WARN, and INFO
      - "--api=false"
      - "--api.dashboard=false"
      - "--api.insecure=false" # Set to true to access the dashboard locally
      - "--pilot.dashboard=false"
      - "--global.sendAnonymousUsage=false"
      - "--global.checkNewVersion=false"
    ports:
      - 80:80
      - 443:443
      # - 8080:8080 # Enable to access the dashboard locally
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_TOKEN}
    volumes:
      - ${TRAEFIK_ROOT_DIR}/traefik/cert:/var/cert
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - vllm-server


  whoami:
    image: traefik/whoami
    container_name: whoami
      # labels:
      #   - "traefik.enable=true"
      #   - "traefik.http.routers.whoami.rule=Host(`${DOMAIN}`)"
      #   - "traefik.http.routers.whoami.tls=true"
      #   - "traefik.http.routers.whoami.entrypoints=https"
      #   - "traefik.http.routers.whoami.tls.certresolver=cloudflare"
      #   - "traefik.http.routers.whoami.tls.domains[0].main=${DOMAIN}"
      #   - "traefik.http.routers.whoami.tls.domains[0].sans=*.${DOMAIN}"
